# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NVqbzsx_eY_Yot2Psx4iRcCK88DhtRaW
"""

from pandas import datetime
from sklearn.linear_model import LinearRegression
from matplotlib import pyplot
from statsmodels.tsa.stattools import adfuller
import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt
import plotly.graph_objects as go
from fbprophet import Prophet
import plotly.express as px
from collections import namedtuple
import matplotlib as mpl
from numpy import mean
from sklearn.metrics import mean_squared_error
import math 
from sklearn.metrics import mean_absolute_error
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.seasonal import STL

data = pd.read_csv('/content/data (1).csv', sep=';')

data.info()

data.head()

city = data['name'].unique()
len(city)

for idx in range(0,len(city)):
    C = data[data['name']==city[idx]].reset_index()
    plt.scatter(np.arange(0,len(C)),C['confirmedInfections'], color = 'blue', label = 'Confirmed')
    plt.title(city[idx])
    plt.xlabel('Days')
    plt.ylabel('Number of Infections ')
    plt.legend()
    plt.show()

city1=data[data['name']=='BAYERN']
city2=data[data['name']=='BADEN-WÃ\x9cRTTEMBERG']
city3=data[data['name']=='BRANDENBURG']
city4=data[data['name']=='HAMBURG']
city5=data[data['name']=='BREMEN']
city6=data[data['name']=='MECKLENBURG-VORPOMMERN']
city7=data[data['name']=='HESSEN']
city8=data[data['name']=='NIEDERSACHSEN']
city9=data[data['name']=='RHEINLAND-PFALZ']
city10=data[data['name']=='NORDRHEIN-WESTFALEN']
city11=data[data['name']=='SACHSEN']
city12=data[data['name']=='SAARLAND']
city13=data[data['name']=='SCHLESWIG-HOLSTEIN']
city14=data[data['name']=='SACHSEN-ANHALT']
city15=data[data['name']=='THÃ\x9cRINGEN']

city1

city1["confirmedInfections"]=city1['confirmedInfections'].diff().fillna(0)
city2["confirmedInfections"]=city2['confirmedInfections'].diff().fillna(0)
city3["confirmedInfections"]=city3['confirmedInfections'].diff().fillna(0)
city4["confirmedInfections"]=city4['confirmedInfections'].diff().fillna(0)
city5["confirmedInfections"]=city5['confirmedInfections'].diff().fillna(0)
city6["confirmedInfections"]=city6['confirmedInfections'].diff().fillna(0)
city7["confirmedInfections"]=city7['confirmedInfections'].diff().fillna(0)
city8["confirmedInfections"]=city8['confirmedInfections'].diff().fillna(0)
city9["confirmedInfections"]=city9['confirmedInfections'].diff().fillna(0)
city10["confirmedInfections"]=city10['confirmedInfections'].diff().fillna(0)
city11["confirmedInfections"]=city11['confirmedInfections'].diff().fillna(0)
city12["confirmedInfections"]=city12['confirmedInfections'].diff().fillna(0)
city13["confirmedInfections"]=city13['confirmedInfections'].diff().fillna(0)
city14["confirmedInfections"]=city14['confirmedInfections'].diff().fillna(0)
city15["confirmedInfections"]=city15['confirmedInfections'].diff().fillna(0)

plt.plot(np.arange(0,len(city1)),city1['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city2)),city2['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city3)),city3['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city4)),city4['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city5)),city5['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city6)),city6['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city7)),city7['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city8)),city8['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city9)),city9['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city10)),city10['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city11)),city11['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city12)),city12['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city13)),city13['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city14)),city14['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

plt.plot(np.arange(0,len(city15)),city15['confirmedInfections'], color = 'red', label = 'Confirmed')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')


plt.title("THARINGER")
plt.xlabel("days")
plt.ylabel("daily infectipons")
plt.show()

moving_avg = city1['confirmedInfections'].rolling(7).mean()
dates=city1['date']
plt.plot(np.arange(0,len(city1)),city1['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city1)),moving_avg, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg2 = city2['confirmedInfections'].rolling(7).mean()
dates2=city2['date']
plt.plot(np.arange(0,len(city2)),city2['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city2)),moving_avg2, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg3 = city3['confirmedInfections'].rolling(7).mean()
dates3=city3['date']
plt.plot(np.arange(0,len(city3)),city3['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city3)),moving_avg3 ,color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg4 = city4['confirmedInfections'].rolling(7).mean()
dates4=city4['date']
plt.plot(np.arange(0,len(city4)),city4['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city4)),moving_avg4, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg5 = city5['confirmedInfections'].rolling(7).mean()
dates5=city5['date']
plt.plot(np.arange(0,len(city5)),city5['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city5)),moving_avg5, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg6 = city6['confirmedInfections'].rolling(7).mean()
dates6=city6['date']
plt.plot(np.arange(0,len(city6)),city6['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city6)),moving_avg6, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg7 = city7['confirmedInfections'].rolling(7).mean()
dates7=city7['date']
plt.plot(np.arange(0,len(city7)),city7['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city7)),moving_avg7, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg8 = city8['confirmedInfections'].rolling(7).mean()
dates8=city8['date']
plt.plot(np.arange(0,len(city8)),city8['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city8)),moving_avg8, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg9 = city9['confirmedInfections'].rolling(7).mean()
dates9=city9['date']
plt.plot(np.arange(0,len(city9)),city9['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city9)),moving_avg9, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg10 = city10['confirmedInfections'].rolling(7).mean()
dates10=city10['date']
plt.plot(np.arange(0,len(city10)),city10['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city10)),moving_avg10, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg11 = city11['confirmedInfections'].rolling(7).mean()
dates11=city11['date']
plt.plot(np.arange(0,len(city11)),city11['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city11)),moving_avg11, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg12 = city12['confirmedInfections'].rolling(7).mean()
dates12=city12['date']
plt.plot(np.arange(0,len(city12)),city12['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city12)),moving_avg12, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg13 = city13['confirmedInfections'].rolling(7).mean()
dates13=city13['date']
plt.plot(np.arange(0,len(city13)),city13['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city13)),moving_avg13, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg14 = city14['confirmedInfections'].rolling(7).mean()
dates14=city14['date']
plt.plot(np.arange(0,len(city14)),city14['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city14)),moving_avg14, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

moving_avg15 = city15['confirmedInfections'].rolling(7).mean()
dates15=city15['date']
plt.plot(np.arange(0,len(city15)),city15['confirmedInfections'], color = 'blue', label = 'train')
plt.plot(np.arange(0,len(city15)),moving_avg15, color = 'black')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

stl= STL(city1['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city2['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city3['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city4['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city5['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city6['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city7['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city8['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city9['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city10['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city11['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city12['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city13['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city14['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

stl= STL(city15['confirmedInfections'],seasonal=7,period=7)
res = stl.fit()
fig = res.plot()

X = [i for i in range(0, len(city1))]
X = np.reshape(X, (len(X), 1))
y = city1['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')
pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city1))]
city1['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')
pyplot.show()

from statsmodels.tsa.stattools import adfuller
def test_stationarity(timeseries):
    rolmean =  timeseries.rolling(7).mean()
    rolstd =  timeseries.rolling(7).std()
    fig = plt.figure(figsize=(12, 8))
    orig = plt.plot(timeseries, color='blue',label='Original')
    mean = plt.plot(rolmean, color='red', label='Rolling Mean')
    std = plt.plot(rolstd, color='black', label = 'Rolling Std')
    plt.legend(loc='best')
    plt.title('Rolling Mean & Standard Deviation')
    plt.show()
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
        dfoutput['Critical Value (%s)'%key] = value
    print (dfoutput)

X = [i for i in range(0, len(city2))]
X = np.reshape(X, (len(X), 1))
y = city2['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')
pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city2))]
city2['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city3))]
X = np.reshape(X, (len(X), 1))
y = city3['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city3))]
city3['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city4))]
X = np.reshape(X, (len(X), 1))
y = city4['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')
pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city4))]
city4['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend')

pyplot.show()

X = [i for i in range(0, len(city5))]
X = np.reshape(X, (len(X), 1))
y = city5['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city5))]
city5['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city6))]
X = np.reshape(X, (len(X), 1))
y = city6['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city6))]
city6['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city7))]
X = np.reshape(X, (len(X), 1))
y = city7['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city7))]
city7['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city8))]
X = np.reshape(X, (len(X), 1))
y = city8['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city8))]
city8['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend')

pyplot.show()

X = [i for i in range(0, len(city9))]
X = np.reshape(X, (len(X), 1))
y = city9['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city9))]
city9['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city10))]
X = np.reshape(X, (len(X), 1))
y = city10['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city10))]
city10['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city11))]
X = np.reshape(X, (len(X), 1))
y = city11['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city11))]
city11['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend')

pyplot.show()

X = [i for i in range(0, len(city12))]
X = np.reshape(X, (len(X), 1))
y = city12['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city12))]
city12['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city13))]
X = np.reshape(X, (len(X), 1))
y = city13['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city13))]
city13['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city14))]
X = np.reshape(X, (len(X), 1))
y = city14['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city14))]
city14['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend ')

pyplot.show()

X = [i for i in range(0, len(city15))]
X = np.reshape(X, (len(X), 1))
y = city15['confirmedInfections'].values
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)
pyplot.plot(y)
pyplot.plot(trend)
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

pyplot.show()
detrended1 = [y[i]-trend[i] for i in range(0, len(city15))]
city15['confirmedInfections2']=detrended1
pyplot.plot(detrended1)
plt.xlabel('Days')
plt.ylabel('Number of Infections with no trend')

pyplot.show()

moving_avg=moving_avg.fillna(0)
moving_avg2=moving_avg2.fillna(0)
moving_avg3=moving_avg3.fillna(0)
moving_avg4=moving_avg4.fillna(0)
moving_avg5=moving_avg5.fillna(0)
moving_avg6=moving_avg6.fillna(0)
moving_avg7=moving_avg7.fillna(0)
moving_avg8=moving_avg8.fillna(0)
moving_avg9=moving_avg9.fillna(0)
moving_avg10=moving_avg10.fillna(0)
moving_avg11=moving_avg11.fillna(0)
moving_avg12=moving_avg12.fillna(0)
moving_avg13=moving_avg13.fillna(0)
moving_avg14=moving_avg14.fillna(0)
moving_avg15=moving_avg15.fillna(0)

from datetime import datetime
dates = pd.to_datetime(dates, format='%d/%m/%Y')
dates2 = pd.to_datetime(dates2, format='%d/%m/%Y')
dates3 = pd.to_datetime(dates3, format='%d/%m/%Y')
dates4 = pd.to_datetime(dates4, format='%d/%m/%Y')
dates5 = pd.to_datetime(dates5, format='%d/%m/%Y')
dates6 = pd.to_datetime(dates6, format='%d/%m/%Y')
dates7 = pd.to_datetime(dates7, format='%d/%m/%Y')
dates8 = pd.to_datetime(dates8, format='%d/%m/%Y')
dates9 = pd.to_datetime(dates9, format='%d/%m/%Y')
dates10 = pd.to_datetime(dates10, format='%d/%m/%Y')
dates11 = pd.to_datetime(dates11, format='%d/%m/%Y')
dates12 = pd.to_datetime(dates12, format='%d/%m/%Y')
dates13 = pd.to_datetime(dates13, format='%d/%m/%Y')
dates14= pd.to_datetime(dates14, format='%d/%m/%Y')
dates15 = pd.to_datetime(dates15, format='%d/%m/%Y')

city1['confirmedInfections2']=moving_avg
city1['date']=dates
city2['confirmedInfections2']=moving_avg2
city2['date']=dates2
city3['confirmedInfections2']=moving_avg3
city3['date']=dates3
city4['confirmedInfections2']=moving_avg4
city4['date']=dates4
city5['confirmedInfections2']=moving_avg5
city5['date']=dates5
city6['confirmedInfections2']=moving_avg6
city6['date']=dates6
city7['confirmedInfections2']=moving_avg7
city7['date']=dates7
city8['confirmedInfections2']=moving_avg8
city8['date']=dates8
city9['confirmedInfections2']=moving_avg9
city9['date']=dates9
city10['confirmedInfections2']=moving_avg10
city10['date']=dates10
city11['confirmedInfections2']=moving_avg11
city11['date']=dates11
city12['confirmedInfections2']=moving_avg12
city12['date']=dates12
city13['confirmedInfections2']=moving_avg13
city13['date']=dates13
city14['confirmedInfections2']=moving_avg11
city14['date']=dates14
city15['confirmedInfections2']=moving_avg15
city15['date']=dates15

city1=city1.fillna(0)
city2=city2.fillna(0)
city3=city3.fillna(0)
city4=city4.fillna(0)
city5=city5.fillna(0)
city6=city6.fillna(0)
city7=city7.fillna(0)
city8=city8.fillna(0)
city9=city9.fillna(0)
city10=city10.fillna(0)
city11=city11.fillna(0)
city12=city12.fillna(0)
city13=city13.fillna(0)
city14=city14.fillna(0)
city15=city15.fillna(0)

city1['date'] =dates
city2['date'] =dates2
city3['date'] =dates3
city4['date'] =dates4
city5['date'] =dates5
city6['date'] =dates6
city7['date'] =dates7
city8['date'] =dates8
city9['date'] =dates9
city10['date'] =dates10
city11['date'] =dates11
city12['date'] =dates12
city13['date'] =dates13
city14['date'] =dates14
city15['date'] =dates15

city1['week'] = city1['date'].dt.week
city1['year']= city1['date'].dt.year
city2['week'] = city2['date'].dt.week
city2['year']= city2['date'].dt.year
city3['week'] = city3['date'].dt.week
city3['year']= city3['date'].dt.year
city4['week'] = city4['date'].dt.week
city4['year']= city4['date'].dt.year
city5['week'] = city5['date'].dt.week
city5['year']= city5['date'].dt.year
city6['week'] = city6['date'].dt.week
city6['year']= city6['date'].dt.year
city7['week'] = city7['date'].dt.week
city7['year']= city7['date'].dt.year
city8['week'] = city8['date'].dt.week
city8['year']= city8['date'].dt.year
city9['week'] = city9['date'].dt.week
city9['year']= city9['date'].dt.year
city10['week'] = city10['date'].dt.week
city10['year']= city10['date'].dt.year
city11['week'] = city11['date'].dt.week
city11['year']= city11['date'].dt.year
city12['week'] = city12['date'].dt.week
city12['year']= city12['date'].dt.year
city13['week'] = city13['date'].dt.week
city13['year']= city13['date'].dt.year
city14['week'] = city14['date'].dt.week
city14['year']= city14['date'].dt.year
city15['week'] = city15['date'].dt.week
city15['year']= city15['date'].dt.year

series=city1[['date','confirmedInfections']]
series2=city2[['date','confirmedInfections']]
series3=city3[['date','confirmedInfections']]
series4=city4[['date','confirmedInfections']]
series5=city5[['date','confirmedInfections']]
series6=city6[['date','confirmedInfections']]
series7=city7[['date','confirmedInfections']]
series8=city8[['date','confirmedInfections']]
series9=city9[['date','confirmedInfections']]
series10=city10[['date','confirmedInfections']]
series10=city10[['date','confirmedInfections']]
series11=city11[['date','confirmedInfections']]
series12=city12[['date','confirmedInfections']]
series13=city13[['date','confirmedInfections']]
series14=city14[['date','confirmedInfections']]
series15=city15[['date','confirmedInfections']]

city1

series['date']=pd.to_datetime(series['date'])
series.set_index('date',inplace=True)
series2['date']=pd.to_datetime(series2['date'])
series2.set_index('date',inplace=True)
series3['date']=pd.to_datetime(series3['date'])
series3.set_index('date',inplace=True)
series4['date']=pd.to_datetime(series4['date'])
series4.set_index('date',inplace=True)
series5['date']=pd.to_datetime(series5['date'])
series5.set_index('date',inplace=True)
series6['date']=pd.to_datetime(series6['date'])
series6.set_index('date',inplace=True)
series7['date']=pd.to_datetime(series7['date'])
series7.set_index('date',inplace=True)
series8['date']=pd.to_datetime(series8['date'])
series8.set_index('date',inplace=True)
series9['date']=pd.to_datetime(series9['date'])
series9.set_index('date',inplace=True)
series10['date']=pd.to_datetime(series10['date'])
series10.set_index('date',inplace=True)
series11['date']=pd.to_datetime(series11['date'])
series11.set_index('date',inplace=True)
series12['date']=pd.to_datetime(series12['date'])
series12.set_index('date',inplace=True)
series13['date']=pd.to_datetime(series13['date'])
series13.set_index('date',inplace=True)
series14['date']=pd.to_datetime(series14['date'])
series14.set_index('date',inplace=True)
series15['date']=pd.to_datetime(series15['date'])
series15.set_index('date',inplace=True)

series['firstD']=series['confirmedInfections']-series['confirmedInfections'].shift(7)
test_stationarity(series['firstD'].dropna())
f=series['confirmedInfections'].shift(7)

train1=series[:333]
test1=series[334:]

from pmdarima import auto_arima
stepwise_fit=auto_arima(series['firstD'].dropna(),trace=True,supress_warnings=True)
stepwise_fit.summary()

model1 =ARIMA(train1['firstD'],order=(2,0,4))
model1=model1.fit()
model1.summary()

start1=len(train1)
end1=len(train1)+len(test1)-1
pred1=model1.predict(start=start1,end=end1,typ='levels')
pred1=pred1+f[334:]
print(pred1.fillna(0))

pred1.fillna(0).plot(legend=True , label='predictions')
test1['confirmedInfections'].plot(legend=True)

from math import sqrt
rmse=sqrt(mean_squared_error(pred1.fillna(0)[1:38],test1['confirmedInfections'][:37]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(pred1.fillna(0)[1:38], test1['confirmedInfections'][:37])

series2['firstD']=series2['confirmedInfections']-series2['confirmedInfections'].shift(1)
test_stationarity(series2['firstD'].dropna())
f2=series2['confirmedInfections'].shift(1)

train2=series2[:333]
test2=series2[334:]

from pmdarima import auto_arima
stepwise_fit=auto_arima(series2['firstD'].dropna(),trace=True,supress_warnings=True)
stepwise_fit.summary()

model2 =ARIMA(train2['firstD'],order=(2,0,5))
model2=model2.fit()
model2.summary()

start2=len(train2)
end2=len(train2)+len(test2)-1
pred2=model2.predict(start=start2,end=end2,typ='levels')
pred2=pred2+f2[334:]
print(pred2.fillna(0))

pred2.fillna(0).plot(legend=True , label='predictions')
test2['confirmedInfections'].plot(legend=True)

from math import sqrt
rmse=sqrt(mean_squared_error(pred2.fillna(0)[1:38],test2['confirmedInfections'][:37]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(pred2.fillna(0)[1:38], test2['confirmedInfections'][:37])

series3['firstD']=series3['confirmedInfections']-series3['confirmedInfections'].shift(1)
test_stationarity(series3['firstD'].dropna())
f3=series3['confirmedInfections'].shift(1)

train3=series3[:333]
test3=series3[334:]

from pmdarima import auto_arima
stepwise_fit=auto_arima(series3['firstD'].dropna(),trace=True,supress_warnings=True)
stepwise_fit.summary()

model3 =ARIMA(train3['firstD'],order=(5,0,2))
model3=model3.fit()
model3.summary()

start3=len(train3)
end3=len(train3)+len(test3)-1
pred3=model3.predict(start=start3,end=end3,typ='levels')
pred3=pred3+f3[334:]
print(pred3.fillna(0))

pred3.fillna(0).plot(legend=True , label='predictions')
test3['confirmedInfections'].plot(legend=True)

from math import sqrt
rmse=sqrt(mean_squared_error(pred3.fillna(0)[1:38],test3['confirmedInfections'][:37]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(pred3.fillna(0)[1:38], test3['confirmedInfections'][:37])

series4['firstD']=series4['confirmedInfections']-series4['confirmedInfections'].shift(1)
test_stationarity(series4['firstD'].dropna())
f4=series4['confirmedInfections'].shift(1)

train4=series4[:329]
test4=series4[330:]

from pmdarima import auto_arima
stepwise_fit=auto_arima(series4['firstD'].dropna(),trace=True,supress_warnings=True)
stepwise_fit.summary()

model4 =ARIMA(train4['firstD'],order=(5,0,2))
model4=model4.fit()
model4.summary()

start4=len(train4)
end4=len(train4)+len(test4)-1
pred4=model4.predict(start=start4,end=end4,typ='levels')
pred4=pred4+f4[330:]
print(pred4.fillna(0))

pred4.fillna(0).plot(legend=True , label='predictions')
test4['confirmedInfections'].plot(legend=True)

from math import sqrt
rmse=sqrt(mean_squared_error(pred4.fillna(0)[1:38],test4['confirmedInfections'][:37]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(pred4.fillna(0)[1:38], test4['confirmedInfections'][:37])

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train=city1[:333]
test=city1[334:]
fitted_model=ExponentialSmoothing(train['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions=fitted_model.forecast(38).rename('DES Forecast')
plt.plot(np.arange(0,len(city1)-39),train['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(334,len(city1)),test['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(334,len(city1)),test_predictions, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train2=city2[:333]
test2=city2[334:]
fitted_model2=ExponentialSmoothing(train2['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions2=fitted_model2.forecast(38).rename('DES Forecast')
plt.plot(np.arange(0,len(city2)-39),train2['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(334,len(city2)),test2['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(334,len(city2)),test_predictions2, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train3=city3[:333]
test3=city3[334:]
fitted_model3=ExponentialSmoothing(train3['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions3=fitted_model3.forecast(38).rename('DES Forecast')
plt.plot(np.arange(0,len(city3)-39),train3['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(334,len(city3)),test3['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(334,len(city3)),test_predictions3, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train4=city4[:329]
test4=city4[330:]
fitted_model4=ExponentialSmoothing(train4['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions4=fitted_model4.forecast(37).rename('DES Forecast')
plt.plot(np.arange(0,len(city4)-38),train4['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(330,len(city4)),test4['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(330,len(city4)),test_predictions4, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train5=city5[:328]
test5=city5[329:]
fitted_model5=ExponentialSmoothing(train5['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions5=fitted_model5.forecast(37).rename('DES Forecast')
plt.plot(np.arange(0,len(city5)-38),train5['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(329,len(city5)),test5['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(329,len(city5)),test_predictions5, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train6=city6[:333]
test6=city6[334:]
fitted_model6=ExponentialSmoothing(train6['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions6=fitted_model6.forecast(38).rename('DES Forecast')
plt.plot(np.arange(0,len(city6)-39),train6['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(334,len(city6)),test6['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(334,len(city6)),test_predictions6, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train7=city7[:330]
test7=city7[331:]
fitted_model7=ExponentialSmoothing(train7['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions7=fitted_model7.forecast(37).rename('DES Forecast')
plt.plot(np.arange(0,len(city7)-38),train7['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(331,len(city7)),test7['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(331,len(city7)),test_predictions7, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train8=city8[:333]
test8=city8[334:]
fitted_model8=ExponentialSmoothing(train8['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions8=fitted_model8.forecast(38).rename('DES Forecast')
plt.plot(np.arange(0,len(city8)-39),train8['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(334,len(city8)),test8['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(334,len(city8)),test_predictions8, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train9=city9[:331]
test9=city9[332:]
fitted_model9=ExponentialSmoothing(train9['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions9=fitted_model9.forecast(36).rename('DES Forecast')
plt.plot(np.arange(0,len(city9)-37),train9['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(332,len(city9)),test9['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(332,len(city9)), test_predictions9 , color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train10=city10[:333]
test10=city10[334:]
fitted_model10=ExponentialSmoothing(train10['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions10=fitted_model10.forecast(38).rename('DES Forecast')
plt.plot(np.arange(0,len(city10)-39),train10['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(334,len(city10)),test10['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(334,len(city10)),test_predictions10, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train11=city11[:328]
test11=city11[329:]
fitted_model11=ExponentialSmoothing(train11['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions11=fitted_model11.forecast(36).rename('DES Forecast')
plt.plot(np.arange(0,len(city11)-37),train11['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(329,len(city11)),test11['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(329,len(city11)),test_predictions11, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train12=city12[:333]
test12=city12[334:]
fitted_model12=ExponentialSmoothing(train12['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions12=fitted_model12.forecast(38).rename('DES Forecast')
plt.plot(np.arange(0,len(city12)-39),train12['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(334,len(city12)),test12['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(334,len(city12)),test_predictions12, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train13=city13[:330]
test13=city13[331:]
fitted_model13=ExponentialSmoothing(train13['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions13=fitted_model13.forecast(37).rename('DES Forecast')
plt.plot(np.arange(0,len(city13)-38),train13['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(331,len(city13)),test13['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(331,len(city13)),test_predictions13, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train14=city14[:321]
test14=city14[322:]
fitted_model14=ExponentialSmoothing(train14['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions14=fitted_model14.forecast(35).rename('DES Forecast')
plt.plot(np.arange(0,len(city14)-36),train14['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(322,len(city14)),test14['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(322,len(city14)),test_predictions14, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from statsmodels.tsa.holtwinters import ExponentialSmoothing
train15=city15[:327]
test15=city15[328:]
fitted_model15=ExponentialSmoothing(train15['confirmedInfections'],trend ='add',seasonal='add',seasonal_periods=14).fit()
test_predictions15=fitted_model15.forecast(36).rename('DES Forecast')
plt.plot(np.arange(0,len(city15)-37),train15['confirmedInfections'], color = 'red', label = 'train')
plt.plot(np.arange(328,len(city15)),test15['confirmedInfections'], color = 'blue', label = 'test')
plt.plot(np.arange(328,len(city15)),test_predictions15, color = 'black', label = 'predictions')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from math import sqrt
rmse = sqrt(mean_squared_error(city1['confirmedInfections'][334:], test_predictions))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city1['confirmedInfections'][334:], test_predictions)

from math import sqrt
rmse = sqrt(mean_squared_error(city2['confirmedInfections'][334:], test_predictions2))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city2['confirmedInfections'][334:], test_predictions2)

from math import sqrt
rmse = sqrt(mean_squared_error(city3['confirmedInfections'][334:], test_predictions3))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city3['confirmedInfections'][334:], test_predictions3)

from math import sqrt
rmse = sqrt(mean_squared_error(city4['confirmedInfections'][330:], test_predictions4))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city4['confirmedInfections'][330:], test_predictions4)

from math import sqrt
rmse = sqrt(mean_squared_error(city5['confirmedInfections'][329:], test_predictions5))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city5['confirmedInfections'][329:], test_predictions5)

from math import sqrt
rmse = sqrt(mean_squared_error(city6['confirmedInfections'][334:], test_predictions6))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city6['confirmedInfections'][334:], test_predictions6)

from math import sqrt
rmse = sqrt(mean_squared_error(city7['confirmedInfections'][331:], test_predictions7))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city7['confirmedInfections'][331:], test_predictions7)

from math import sqrt
rmse = sqrt(mean_squared_error(city8['confirmedInfections'][334:], test_predictions8))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city8['confirmedInfections'][334:], test_predictions8)

from math import sqrt
rmse = sqrt(mean_squared_error(city9['confirmedInfections'][332:], test_predictions9))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city9['confirmedInfections'][332:], test_predictions9)

from math import sqrt
rmse = sqrt(mean_squared_error(city10['confirmedInfections'][334:], test_predictions10))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city10['confirmedInfections'][334:], test_predictions10)

from math import sqrt
rmse = sqrt(mean_squared_error(city11['confirmedInfections'][329:], test_predictions11))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city11['confirmedInfections'][329:], test_predictions11)

from math import sqrt
rmse = sqrt(mean_squared_error(city12['confirmedInfections'][334:], test_predictions12))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city12['confirmedInfections'][334:], test_predictions12)

from math import sqrt
rmse = sqrt(mean_squared_error(city13['confirmedInfections'][331:], test_predictions13))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city13['confirmedInfections'][331:], test_predictions13)

from math import sqrt
rmse = sqrt(mean_squared_error(city14['confirmedInfections'][322:], test_predictions14))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city14['confirmedInfections'][322:], test_predictions14)

from math import sqrt
rmse = sqrt(mean_squared_error(city15['confirmedInfections'][328:], test_predictions15))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city15['confirmedInfections'][328:], test_predictions15)

s=city1[['date','confirmedInfections']]
s2=city2[['date','confirmedInfections']]
s3=city3[['date','confirmedInfections']]
s4=city4[['date','confirmedInfections']]
s5=city5[['date','confirmedInfections']]
s6=city6[['date','confirmedInfections']]
s7=city7[['date','confirmedInfections']]
s8=city8[['date','confirmedInfections']]
s9=city9[['date','confirmedInfections']]
s10=city10[['date','confirmedInfections']]
s11=city11[['date','confirmedInfections']]
s12=city12[['date','confirmedInfections']]
s13=city13[['date','confirmedInfections']]
s14=city14[['date','confirmedInfections']]
s15=city15[['date','confirmedInfections']]
s['date']=pd.to_datetime(s['date'])
s2['date']=pd.to_datetime(s2['date'])
s3['date']=pd.to_datetime(s3['date'])
s4['date']=pd.to_datetime(s4['date'])
s['date']=pd.to_datetime(s5['date'])
s6['date']=pd.to_datetime(s6['date'])
s7['date']=pd.to_datetime(s7['date'])
s8['date']=pd.to_datetime(s8['date'])
s9['date']=pd.to_datetime(s9['date'])
s10['date']=pd.to_datetime(s10['date'])
s11['date']=pd.to_datetime(s11['date'])
s12['date']=pd.to_datetime(s12['date'])
s13['date']=pd.to_datetime(s13['date'])
s14['date']=pd.to_datetime(s14['date'])
s15['date']=pd.to_datetime(s15['date'])
s['firstD']=s['confirmedInfections']-s['confirmedInfections'].shift(7)
f=s['confirmedInfections'].shift(7)
s2['firstD']=s['confirmedInfections']-s2['confirmedInfections'].shift(1)
f2=s2['confirmedInfections'].shift(1)
s3['firstD']=s['confirmedInfections']-s3['confirmedInfections'].shift(1)
f3=s3['confirmedInfections'].shift(1)
s4['firstD']=s['confirmedInfections']-s4['confirmedInfections'].shift(1)
f4=s4['confirmedInfections'].shift(1)
s5['firstD']=s['confirmedInfections']-s5['confirmedInfections'].shift(1)
f5=s5['confirmedInfections'].shift(1)
s6['firstD']=s['confirmedInfections']-s6['confirmedInfections'].shift(1)
f6=s6['confirmedInfections'].shift(1)
s7['firstD']=s['confirmedInfections']-s7['confirmedInfections'].shift(1)
f7=s7['confirmedInfections'].shift(1)
s8['firstD']=s['confirmedInfections']-s8['confirmedInfections'].shift(1)
f8=s8['confirmedInfections'].shift(1)
s9['firstD']=s['confirmedInfections']-s9['confirmedInfections'].shift(1)
f9=s9['confirmedInfections'].shift(1)
s10['firstD']=s['confirmedInfections']-s10['confirmedInfections'].shift(1)
f10=s10['confirmedInfections'].shift(1)
s11['firstD']=s['confirmedInfections']-s11['confirmedInfections'].shift(1)
f11=s11['confirmedInfections'].shift(1)
s12['firstD']=s['confirmedInfections']-s12['confirmedInfections'].shift(1)
f12=s12['confirmedInfections'].shift(1)
s13['firstD']=s['confirmedInfections']-s13['confirmedInfections'].shift(1)
f13=s13['confirmedInfections'].shift(1)
s14['firstD']=s['confirmedInfections']-s14['confirmedInfections'].shift(1)
f14=s14['confirmedInfections'].shift(1)
s15['firstD']=s['confirmedInfections']-s15['confirmedInfections'].shift(1)
f15=s15['confirmedInfections'].shift(1)

X = [i for i in range(0, len(s))]
X = np.reshape(X, (len(X), 1))
y = s['firstD'].fillna(0).values 
xtrain=X[:333] 
ytrain=y[:333] 
xtest=X[334:] 
ytest=y[334:] 
model = LinearRegression()
model.fit(xtrain, ytrain)
model=model.predict(xtest)
model=model+f[334:]
city1['confirmedInfections'][:333].plot(legend=True , label='TRAIN')
city1['confirmedInfections'][334:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s2))]
X = np.reshape(X, (len(X), 1))
y = s2['firstD'].fillna(0).values
xtrain=X[:333] 
ytrain=y[:333] 
xtest=X[334:] 
ytest=y[334:] 
model2 = LinearRegression()
model2.fit(xtrain, ytrain)
model2=model2.predict(xtest)
model2=model2+f2[334:]
city2['confirmedInfections'][:333].plot(legend=True , label='TRAIN')
city2['confirmedInfections'][334:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model2.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s3))]
X = np.reshape(X, (len(X), 1))
y = s3['firstD'].fillna(0).values
xtrain=X[:333] 
ytrain=y[:333] 
xtest=X[334:] 
ytest=y[334:] 
model3 = LinearRegression()
model3.fit(xtrain, ytrain)
model3=model3.predict(xtest)
model3=model3+f3[334:]
city3['confirmedInfections'][:333].plot(legend=True , label='TRAIN')
city3['confirmedInfections'][334:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model3.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s4))]
X = np.reshape(X, (len(X), 1))
y = s4['firstD'].fillna(0).values
xtrain=X[:329] 
ytrain=y[:329] 
xtest=X[330:] 
ytest=y[330:] 
model4 = LinearRegression()
model4.fit(xtrain, ytrain)
model4=model4.predict(xtest)
model4=model4+f4[330:]
city4['confirmedInfections'][:329].plot(legend=True , label='TRAIN')
city4['confirmedInfections'][330:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model4.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s5))]
X = np.reshape(X, (len(X), 1))
y = s5['firstD'].fillna(0).values
xtrain=X[:328] 
ytrain=y[:328] 
xtest=X[329:] 
ytest=y[329:] 
model5 = LinearRegression()
model5.fit(xtrain, ytrain)
model5=model5.predict(xtest)
model5=model5+f5[329:]
city5['confirmedInfections'][:328].plot(legend=True , label='TRAIN')
city5['confirmedInfections'][329:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model5.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s6))]
X = np.reshape(X, (len(X), 1))
y = s6['firstD'].fillna(0).values
xtrain=X[:333] 
ytrain=y[:333] 
xtest=X[334:] 
ytest=y[334:] 
model6 = LinearRegression()
model6.fit(xtrain, ytrain)
model6=model6.predict(xtest)
model6=model6+f6[334:]
city6['confirmedInfections'][:333].plot(legend=True , label='TRAIN')
city6['confirmedInfections'][334:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model6.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s7))]
X = np.reshape(X, (len(X), 1))
y = s7['firstD'].fillna(0).values
xtrain=X[:330] 
ytrain=y[:330] 
xtest=X[331:] 
ytest=y[331:] 
model7 = LinearRegression()
model7.fit(xtrain, ytrain)
model7=model7.predict(xtest)
model7=model7+f7[331:]
city7['confirmedInfections'][:330].plot(legend=True , label='TRAIN')
city7['confirmedInfections'][331:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model7.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s8))]
X = np.reshape(X, (len(X), 1))
y = s8['firstD'].fillna(0).values
xtrain=X[:333] 
ytrain=y[:333] 
xtest=X[334:] 
ytest=y[334:] 
model8 = LinearRegression()
model8.fit(xtrain, ytrain)
model8=model8.predict(xtest)
model8=model8+f8[334:]
city8['confirmedInfections'][:329].plot(legend=True , label='TRAIN')
city8['confirmedInfections'][330:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model8.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s9))]
X = np.reshape(X, (len(X), 1))
y = s9['firstD'].fillna(0).values
xtrain=X[:331] 
ytrain=y[:331] 
xtest=X[332:] 
ytest=y[332:] 
model9 = LinearRegression()
model9.fit(xtrain, ytrain)
model9=model9.predict(xtest)
model9=model9+f9[332:]
city9['confirmedInfections'][:331].plot(legend=True , label='TRAIN')
city9['confirmedInfections'][332:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model9.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s10))]
X = np.reshape(X, (len(X), 1))
y = s10['firstD'].fillna(0).values
xtrain=X[:333] 
ytrain=y[:333] 
xtest=X[334:] 
ytest=y[334:] 
model10 = LinearRegression()
model10.fit(xtrain, ytrain)
model10=model10.predict(xtest)
model10=model10+f10[334:]
city10['confirmedInfections'][:333].plot(legend=True , label='TRAIN')
city10['confirmedInfections'][334:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model10.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s11))]
X = np.reshape(X, (len(X), 1))
y = s11['firstD'].fillna(0).values
xtrain=X[:328] 
ytrain=y[:328] 
xtest=X[329:] 
ytest=y[329:] 
model11 = LinearRegression()
model11.fit(xtrain, ytrain)
model11=model11.predict(xtest)
model11=model11+f11[329:]
city11['confirmedInfections'][:328].plot(legend=True , label='TRAIN')
city11['confirmedInfections'][329:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model11.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s12))]
X = np.reshape(X, (len(X), 1))
y = s12['firstD'].fillna(0).values
xtrain=X[:333] 
ytrain=y[:333] 
xtest=X[334:] 
ytest=y[334:] 
model12 = LinearRegression()
model12.fit(xtrain, ytrain)
model12=model12.predict(xtest)
model12=model12+f12[334:]
city12['confirmedInfections'][:333].plot(legend=True , label='TRAIN')
city12['confirmedInfections'][334:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model12.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s13))]
X = np.reshape(X, (len(X), 1))
y = s13['firstD'].fillna(0).values
xtrain=X[:329] 
ytrain=y[:329] 
xtest=X[330:] 
ytest=y[330:] 
model13 = LinearRegression()
model13.fit(xtrain, ytrain)
model13=model13.predict(xtest)
model13=model13+f13[330:]
city13['confirmedInfections'][:329].plot(legend=True , label='TRAIN')
city13['confirmedInfections'][330:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model13.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s14))]
X = np.reshape(X, (len(X), 1))
y = s14['firstD'].fillna(0).values
xtrain=X[:329] 
ytrain=y[:329] 
xtest=X[330:] 
ytest=y[330:] 
model14 = LinearRegression()
model14.fit(xtrain, ytrain)
model14=model14.predict(xtest)
model14=model14+f14[330:]
city14['confirmedInfections'][:329].plot(legend=True , label='TRAIN')
city14['confirmedInfections'][330:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model14.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

X = [i for i in range(0, len(s15))]
X = np.reshape(X, (len(X), 1))
y = s15['firstD'].fillna(0).values
xtrain=X[:329] 
ytrain=y[:329] 
xtest=X[330:] 
ytest=y[330:] 
model15 = LinearRegression()
model15.fit(xtrain, ytrain)
model15=model15.predict(xtest)
model15=model15+f15[330:]
city15['confirmedInfections'][:329].plot(legend=True , label='TRAIN')
city15['confirmedInfections'][330:].plot( figsize=(12,8), color='black' , label='TEST' , legend=True)
model15.plot(legend=True , label='PREDICTION')
plt.xlabel('Days')
plt.ylabel('Number of Infections ')

from math import sqrt
rmse=sqrt(mean_squared_error(model,city1['confirmedInfections'][334:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city1['confirmedInfections'][334:], model)

from math import sqrt
rmse=sqrt(mean_squared_error(model2,city2['confirmedInfections'][334:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city2['confirmedInfections'][334:], model2)

from math import sqrt
rmse=sqrt(mean_squared_error(model3,city3['confirmedInfections'][334:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city3['confirmedInfections'][334:], model3)

from math import sqrt
rmse=sqrt(mean_squared_error(model4,city4['confirmedInfections'][330:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city4['confirmedInfections'][330:], model4)

from math import sqrt
rmse=sqrt(mean_squared_error(model5,city5['confirmedInfections'][329:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city5['confirmedInfections'][329:], model5)

from math import sqrt
rmse=sqrt(mean_squared_error(model6,city6['confirmedInfections'][334:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city6['confirmedInfections'][334:], model6)

from math import sqrt
rmse=sqrt(mean_squared_error(model7,city7['confirmedInfections'][331:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city7['confirmedInfections'][331:], model7)

from math import sqrt
rmse=sqrt(mean_squared_error(model8,city8['confirmedInfections'][334:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city8['confirmedInfections'][334:], model8)

from math import sqrt
rmse=sqrt(mean_squared_error(model9,city9['confirmedInfections'][332:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city9['confirmedInfections'][332:], model9)

from math import sqrt
rmse=sqrt(mean_squared_error(model10,city10['confirmedInfections'][334:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city10['confirmedInfections'][334:], model10)

from math import sqrt
rmse=sqrt(mean_squared_error(model11,city11['confirmedInfections'][329:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city11['confirmedInfections'][329:], model11)

from math import sqrt
rmse=sqrt(mean_squared_error(model12,city12['confirmedInfections'][334:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city12['confirmedInfections'][334:], model12)

from math import sqrt
rmse=sqrt(mean_squared_error(model13,city13['confirmedInfections'][330:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city13['confirmedInfections'][330:], model13)

from math import sqrt
rmse=sqrt(mean_squared_error(model14,city14['confirmedInfections'][330:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city14['confirmedInfections'][330:], model14)

from math import sqrt
rmse=sqrt(mean_squared_error(model15,city15['confirmedInfections'][330:]))
print(rmse)

from sklearn.metrics import mean_absolute_error
mean_absolute_error(city15['confirmedInfections'][330:], model15)